#include <iostream>

// Definition of ListNode
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

bool hasCycle(ListNode* head) {
    if (head == nullptr) {
        return false;
    }
    ListNode* slow = head;
    ListNode* fast = head->next;
    while (slow != fast) {
        if (fast == nullptr || fast->next == nullptr) {
            return false;
        }
        slow = slow->next;
        fast = fast->next->next;
    }
    return true;
}

int main() {
    // Example usage
    ListNode* node1 = new ListNode(1);
    ListNode* node2 = new ListNode(2);
    ListNode* node3 = new ListNode(3);
    node1->next = node2;
    node2->next = node3;
    node3->next = node1; // Creating a cycle

    bool hasCycleResult = hasCycle(node1);
    std::cout << "Does the linked list have a cycle? " << (hasCycleResult ? "Yes" : "No") << std::endl;

    // Clean up memory (not shown in original code)
    delete node1;
    delete node2;
    delete node3;

    return 0;
}
