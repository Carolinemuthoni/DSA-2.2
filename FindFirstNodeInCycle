#include <iostream>

// Definition of ListNode
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

ListNode* detectCycle(ListNode* head) {
    if (head == nullptr || head->next == nullptr) {
        return nullptr; // No cycle if the list is empty or has only one node
    }

    ListNode* slow = head;
    ListNode* fast = head;

    // Detect cycle
    while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) {
            break; // Cycle detected
        }
    }

    // If there's no cycle
    if (fast == nullptr || fast->next == nullptr) {
        return nullptr;
    }

    // Reset slow pointer to head and move both pointers one step at a time
    slow = head;
    while (slow != fast) {
        slow = slow->next;
        fast = fast->next;
    }

    // Return the node where they meet (start of the cycle)
    return slow;
}

int main() {
    // Example usage
    ListNode* node1 = new ListNode(3);
    ListNode* node2 = new ListNode(2);
    ListNode* node3 = new ListNode(0);
    ListNode* node4 = new ListNode(-4);

    // Constructing cycle: tail connects to node index 1
    node1->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = node2;

    ListNode* cycleStart = detectCycle(node1);
    if (cycleStart) {
        std::cout << "Tail connects to node index " << cycleStart->val << std::endl;
    } else {
        std::cout << "No cycle" << std::endl;
    }

    // Clean up memory (not shown in original code)
    delete node1;
    delete node2;
    delete node3;
    delete node4;

    return 0;
}
